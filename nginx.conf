events {}

http {
    # -------- ajustes globales ----------
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    tcp_nopush    on;

    client_max_body_size 10m;       # los chunks de audio son pequeños
    proxy_read_timeout    3600s;    # mantiene WebSocket abierto hasta 1h
    proxy_send_timeout    3600s;    # idem para el envío
    proxy_buffering       off;      # desactiva buffering (streaming en tiempo real)
    gzip                  off;      # no recomprimir audio ni WebSocket

    # Para gestionar correctamente Connection/Upgrade en WS
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Upstream hacia el servicio "app"
    upstream backend_app {
        server app:8000;
        keepalive 32;
    }

    # ===== HTTP (80) =====
    server {
        listen 80;
        server_name _;

        root /usr/share/nginx/html;

        # estáticos (con /static/)
        location /static/ {
            alias /usr/share/nginx/html/;
            try_files $uri =404;
            access_log off;
            add_header Cache-Control "public, max-age=3600, immutable";
        }

        # config.json sin caché
        location = /config.json {
            try_files /config.json =404;
            add_header Cache-Control "no-store";
        }

        # backend
        location / {
            try_files $uri $uri/ @backend;
        }

        location @backend {
            proxy_pass         http://backend_app;
            proxy_http_version 1.1;

            # WebSocket
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection $connection_upgrade;
            proxy_set_header   Sec-WebSocket-Protocol $http_sec_websocket_protocol;

            # Encabezados comunes
            proxy_set_header   Host $host;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   X-Forwarded-Host $host;
            proxy_set_header   X-Forwarded-Port $server_port;

            proxy_set_header   Authorization $http_authorization;
        }
    }

    # ===== HTTPS (443) =====
    server {
        listen 443 ssl;
        server_name server.local;

        root /usr/share/nginx/html;

        ssl_certificate     /etc/ssl/certs/server.local.pem;
        ssl_certificate_key /etc/ssl/private/server.local-key.pem;

        # TLS moderno
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # headers de seguridad básicos
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";

        # estáticos (con /static/)
        location /static/ {
            alias /usr/share/nginx/html/;
            try_files $uri =404;
            access_log off;
            add_header Cache-Control "public, max-age=3600, immutable";
        }

        # config.json sin caché
        location = /config.json {
            try_files /config.json =404;
            add_header Cache-Control "no-store";
        }

        # backend
        location / {
            try_files $uri $uri/ @backend;
        }

        location @backend {
            proxy_pass         http://backend_app;
            proxy_http_version 1.1;

            # WebSocket
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection $connection_upgrade;
            proxy_set_header   Sec-WebSocket-Protocol $http_sec_websocket_protocol;

            # Encabezados comunes
            proxy_set_header   Host $host;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   X-Forwarded-Host $host;
            proxy_set_header   X-Forwarded-Port $server_port;

            proxy_set_header   Authorization $http_authorization;
        }
    }
}
